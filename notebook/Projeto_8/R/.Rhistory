"Tipo de Alvo do Ataque",
"Tipo de Arma",
"Nacionalidade Alvo")),
sliderInput("kills",
"Número Mínimo de Mortos:",
min = 0,
max = 20000,
value = 40),
sliderInput("year",
"Ano:",
min = 1970,
max = 2017,
value = 1970,
animate = TRUE,
sep = ""),
actionButton("update", "Atualizar o Dashboard")),
# Corpo da página
dashboardBody(fluidRow(column(width = 6,
box(plotOutput("bubblePlot", height = 350), width = NULL),
box(plotOutput("barChart", height = 350), width = NULL)),
column(width = 6,
box(tableOutput("view"), width = NULL)))))
# Função para organização dos dados
server <- function(input, output) {
# Input dos dados
datasetInput <- eventReactive(input$update, {switch(input$dataset,
"Mortos Por Grupo Terrorista" = GroupTable,
"Região do Ataque" = RegionTable,
"País do Ataque" = countryTable,
"Tipo de Ataque" = attacktypeTable,
"Tipo de Alvo do Ataque" = targtypeTable,
"Tipo de Arma" = WeaponTable,
"Nacionalidade Alvo" = natltyTable)},
ignoreNULL = FALSE)
# Títulos
TitleInput <- eventReactive(input$update, {switch(input$dataset,
"Mortos Por Grupo Terrorista" = "Grupo Terrorista",
"Região Onde Ocorreu o Ataque" = "Regiões",
"País Onde Ocorreu o Ataque" = "Países",
"Tipo de Ataque" = "Tipo de Ataque",
"Tipo de Alvo do Ataque" = "Tipo de Alvo",
"Tipo de Arma" = "Tipo de Arma",
"Nacionalidade Alvo" = "Nacionalidade Alvo")},
ignoreNULL = FALSE)
# Gráfico de bolhas
output$bubblePlot <- renderPlot({
# Dataset
dataset <- datasetInput()
# Título
Title <- TitleInput()
# Limites
xmin <- min(dataset$attack_count)
xmax <- max(dataset$attack_count)
ymin <- min(dataset$kills_total)
ymax <- max(dataset$kills_total)
# Dataset
new_data1 <-dataset[!(dataset$year != input$year | dataset$kills_total < input$kills),]
# Criação do gráfico
ggplot(new_data1, aes(x = attack_count, y = kills_total, color = Title, size = kills_mean)) +
geom_point(alpha = 0.5) +
scale_size(range = c(3, 12)) +
scale_color_viridis_d() +
scale_y_log10(limits = c(ymin + 1, ymax), labels = scales::comma) +
scale_x_log10(limits = c(xmin, xmax), labels = scales::comma) +
ylab("Total de Mortos (Escala de Log)") +
xlab("Total de Ataques (Escala de Log)") +
theme_bw() +
theme(
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 14, hjust = .5),
axis.title.x = element_text(face = "bold", size = 11, vjust = 0),
axis.title.y = element_text(face = "bold", size = 11),
axis.text = element_text(face = "bold"),
legend.title = element_text(face = "bold", size = 11),
legend.text = element_text(face = "bold", size = 10)
)
})
# Gráfico de barras
output$barChart <- renderPlot({
# Dataset
dataset <- datasetInput()
# Título
Title <- TitleInput()
# Ajuste nos dados
new_data2 <- dataset[!(dataset$kills_total < input$kills | dataset$year > input$year),]
new_data2 <- new_data2 %>% group_by(year) %>% tally() %>%
arrange(year) %>%
mutate(color = if_else(year - 1 == lag(year),
if_else(n > lag(n), "Increase",
if_else(n == lag(n), "Same", "Decrease")), "Increase"))
new_data2$color[1] = "Increase"
new_data2v2 <- dataset[!(dataset$kills_total < input$kills),]
new_data2v2 <- new_data2v2 %>% group_by(year) %>% tally()
ymax <- max(new_data2v2$n)
# Criação do gráfico
ggplot(new_data2, aes(x = year, y = n)) + geom_col(color = "#07415c", fill = "#5cbdb7", width = 1) +
labs(title = Title) +
ylab(paste(Title)) +
xlab("Year") +
theme_bw() +
xlim(1969, 2018) +
ylim(0, ymax) +
theme(
panel.grid.minor = element_blank(),
plot.title = element_text(face = "bold", size = 14, hjust = .5),
axis.title.x = element_text(face = "bold", size = 12),
axis.title.y = element_text(face = "bold", size = 12, vjust = 3),
axis.text = element_text(face = "bold")
)
})
# Tabela
output$view <- renderTable({
# Dataset
dataset <- datasetInput()
# Título
Title <- TitleInput()
# Ajuste do dataset
new_data3 <- dataset[!(dataset$year != input$year | dataset$kills_total < input$kills),]
new_data3 <- new_data3 %>% select(1, attack_count, kills_total, kills_mean) %>%
arrange(kills_total, decreasing = TRUE) %>%
mutate(attack_count = comma(attack_count), kills_total = comma(kills_total), kills_mean = comma(kills_mean))
# Nomes das colunas
colnames(new_data3)[1] <- Title
colnames(new_data3)[2] <- "Número de Ataques"
colnames(new_data3)[3] <- "Total de Mortos"
colnames(new_data3)[4] <- "Média de Mortos"
head(new_data3, n = nrow(new_data3))
})
}
# Execução
shinyApp(ui, server)
## Importando as bibliotecas
library(readr)
library(dplyr)
library(ggplot2)
library(corrplot)
library(lubridate)
library(lubridate)
library(caret)
library(randomForest)
library(xgboost)
library(e1071)
library(class)
setwd("G:/Meu Drive/AI_data_lab/Cursos_ml_AI/Data Science Academey/Formação cientista de dados 2.0/Projetos_gerais/Projetos_ML/8.Machine learning - Modelagem preditiva em iot")
## Dataset
data_train <- read_csv("projeto8-training.csv")
data_test <- read_csv("projeto8-testing.csv")
# Visualizandos dados
head(data_train)
head(data_test)
tail(data_train)
# Verifique as primeiras linhas dos dados
head(data_train)
# Verifique a estrutura dos dados
str(data_train)
# Verifique se há valores ausentes
sum(is.na(data_train))
# Resumo estatístico das variáveis numéricas:
summary(data_train)
ggplot(data_train, aes(x = Appliances)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Histograma de Appliances", x = "Valor", y = "Frequência")
ggplot(data_train, aes(x = WeekStatus, y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
ggplot(data_train, aes(x = T_out, y = Appliances)) +
geom_point() +
labs(title = "Scatterplot de T_out e Appliances", x = "T_out", y = "Appliances")
# Crie um scatterplot com regressão
ggplot(data_train, aes(x = T1, y = Appliances)) +
geom_point(color = "blue") +                    # Adicione os pontos
labs(title = "Gráfico de Regressão Linear",
x = "T_out",
y = "Appliances")
# Crie um gráfico de barras
ggplot(data_train, aes(x = WeekStatus, y = Appliances, fill = WeekStatus)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras de Appliances por WeekStatus",
x = "WeekStatus",
y = "Appliances")
# Gráfico (boxplot)
boxplot(data_train$Appliances)
# Gráfico (boxplot)
boxplot(data_train$Appliances)
title("Gráfico váriavel alvao com outliers")
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
ggtitle("Gráfico váriavel alvao com outliers")
ggplot(data_train, aes(x = WeekStatus, y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
# Crie um gráfico de barras
ggplot(data_train, aes(x = Day_of_week, y = Appliances, fill = Day_of_week)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras de Appliances por Dia da Semana",
x = "Dia da Semana",
y = "Appliances")
# Crie um gráfico de barras
ggplot(data_train, aes(x = Day_of_week, y = Appliances, fill = Day_of_week, col="green")) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras de Appliances por Dia da Semana",
x = "Dia da Semana",
y = "Appliances")
# Crie um gráfico de barras
ggplot(data_train, aes(x = Day_of_week, y = Appliances, fill = Day_of_week)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras de Appliances por Dia da Semana",
x = "Dia da Semana",
y = "Appliances")
# Converta a coluna "date" em um objeto de data
# Supondo que a coluna "date" esteja no formato correto
data_train$date <- ymd_hms(data_train$date)
# Crie um gráfico de série temporal
ggplot(data_train, aes(x = date, y = Appliances, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
ggplot(data_train, aes(x = date, y = T1, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Crie um gráfico de séries temporais para T1 e RH_1
ggplot(data_train, aes(x = date)) +
geom_line(aes(y = T1, color = "T1")) +
geom_line(aes(y = RH_1, color = "RH_1")) +
labs(title = "Séries Temporais de T1 e RH_1",
x = "Data",
y = "Valor") +
scale_color_manual(values = c("T1" = "blue", "RH_1" = "red")) +
theme_minimal()
# Crie a matriz de correlação (substitua as variáveis pelas desejadas)
correlation_matrix <- cor(data_train[, c("T_out", "Appliances", "RH_1")])
corrplot(correlation_matrix, method = "circle", type = "full", tl.cex = 0.7, tl.col = "black") # Plot da matriz de correlação
## Verificação de outliers
# Trate os valores ausentes, por exemplo, preenchendo-os com a média
data_train$Appliances[is.na(data_train$Appliances)] <- mean(data_train$Appliances, na.rm = TRUE)
# 1) Verifique a presença de outliers (boxplot)
boxplot(data_train$Appliances)
# 1) Verifique a presença de outliers (boxplot)
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvao com outliers")
# Trate os outliers, se necessário
Q1 <- quantile(data_train$Appliances, 0.25)
Q3 <- quantile(data_train$Appliances, 0.75)
IQR <- Q3 - Q1
limite_superior <- Q3 + 1.5 * IQR
# Verificação outliers
out <- data_train$Appliances[data_train$Appliances > limite_superior] <- limite_superior
out
## Limpeza de dados
colunas_com_valores_ausentes <- colnames(data_train)[apply(data_train, 2, function(x) any(is.na(x)))]
data_sem_valores_ausentes <- na.omit(data_train)
data_train$Appliances[is.na(data_train$Appliances)] <- mean(data_train$Appliances, na.rm = TRUE)
colunas_com_valores_ausentes <- colnames(data_train)[apply(data_train, 2, function(x) any(is.na(x)))]
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvao com outliers")
# Gráfico sem outliers
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvo sem outliers")
### Segunda parte 2 - Análise série temporal
# Crie um gráfico de série temporal
ggplot(data_train, aes(x = date, y = Appliances, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
ggplot(data_train, aes(x = date, y = T1, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Crie um gráfico de série temporal
ggplot(data_train, aes(x = date, y = Appliances, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Crie um gráfico de série temporal para a variável T1
ggplot(data_train, aes(x = NSM, y = T1)) +
geom_line() +
labs(x = "Tempo", y = "T1", title = "Análise de Série Temporal para T1") +
theme_minimal()
ggplot(data_train, aes(x = date, y = T1, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Crie um gráfico de séries temporais para T1 e RH_1
ggplot(data_train, aes(x = date)) +
geom_line(aes(y = T1, color = "T1")) +
geom_line(aes(y = RH_1, color = "RH_1")) +
labs(title = "Séries Temporais de T1 e RH_1",
x = "Data",
y = "Valor") +
scale_color_manual(values = c("T1" = "blue", "RH_1" = "red")) +
theme_minimal()
ggplot(data_train, aes(x = date, y = T1, color = Day_of_week)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Crie um gráfico de séries temporais para T1 e RH_1
ggplot(data_train, aes(x = date)) +
geom_line(aes(y = T1, color = "T1")) +
geom_line(aes(y = RH_1, color = "RH_1")) +
labs(title = "Séries Temporais de T1 e RH_1",
x = "Data",
y = "Valor") +
scale_color_manual(values = c("T1" = "blue", "RH_1" = "green")) +
theme_minimal()
ggplot(data_train, aes(x = date, y = RH_1, color = Day_of_week)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
ggplot(data_train, aes(x = date, y = Tdewpoint, color = Day_of_week)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Crie um gráfico de série temporal para Wind Speed (Velocidade do Vento) e T1 (Temperatura)
ggplot(data_train, aes(x = Windspeed, y = T1, color = "T1")) +
geom_line() +
geom_line(aes(y = Windspeed, color = "Wind Speed")) +
labs(x = "Tempo", y = "Valores", title = "Análise de Série Temporal: Wind Speed vs T1") +
scale_color_manual(values = c("T1" = "blue", "Wind Speed" = "red")) +
theme_minimal()
ggplot(data_train, aes(x = date, y = Tdewpoint, color = Day_of_week)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Gráfico de série temporal para Wind Speed (Velocidade do Vento) e T1 (Temperatura)
ggplot(data_train, aes(x = date, y = Windspeed, color = Day_of_week)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Gráfico de série temporal para Wind Speed (Velocidade do Vento) e T1 (Temperatura)
ggplot(data_train, aes(x = date, y = Windspeed, color = Day_of_week)) +
geom_line() +
labs(x = "Tempo", y = "Valores", title = "Análise de Série Temporal: Wind Speed vs T1") +
scale_color_manual(values = c("T1" = "blue", "Wind Speed" = "red")) +
theme_minimal()
# Gráfico de série temporal para Wind Speed (Velocidade do Vento) e T1 (Temperatura)
ggplot(data_train, aes(x = date, y = Windspeed, color = Day_of_week)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Gráfico váriavel alvo
# Crie um gráfico de barras empilhadas
ggplot(data_train, aes(x = "rv1", y = T1, fill = "rv2")) +
geom_bar(stat = "identity") +
labs(x = "Variáveis", y = "T1", title = "Gráfico de Barras: T1 em relação a rv1 e rv2") +
theme_minimal()
ggplot(data_train, aes(x = Appliances)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Histograma de Appliances", x = "Valor", y = "Frequência")
ggplot(data_train, aes(x = rv1)) +
geom_histogram(binwidth = 1, fill = "red", alpha = 0.5) +
labs(x = "rv1", y = "Contagem", title = "Histograma: Distribuição de rv1") +
theme_minimal()
ggplot(data_train, aes(x = rv2)) +
geom_histogram(binwidth = 1, fill = "green", alpha = 0.5) +
labs(x = "rv2", y = "Contagem", title = "Histograma: Distribuição de rv2") +
theme_minimal()
ggplot(data_train, aes(x = Appliances)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Histograma de Appliances", x = "Valor", y = "Frequência")
# Gráfico (boxplot)
ggplot(data_train, aes(y = rv1)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvo com outliers")
ggplot(data_train, aes(x = WeekStatus, y = rv1)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
# Gráfico (boxplot)
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvo com outliers")
ggplot(data_train, aes(x = WeekStatus, y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
ggplot(data_train, aes(x = Day_of_week, y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
ggplot(data_train, aes(x = WeekStatus , y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
ggplot(data_train, aes(x = Day_of_week, y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
ggplot(data_train, aes(x = rv1)) +
geom_histogram(binwidth = 1, fill = "red", alpha = 0.5) +
labs(x = "rv1", y = "Contagem", title = "Histograma: Distribuição de rv1") +
theme_minimal()
ggplot(data_train, aes(x = rv2)) +
geom_histogram(binwidth = 1, fill = "green", alpha = 0.5) +
labs(x = "rv2", y = "Contagem", title = "Histograma: Distribuição de rv2") +
theme_minimal()
ggplot(data_train, aes(x = Appliances)) +
geom_histogram(binwidth = 10, fill = "blue", color = "black") +
labs(title = "Histograma de Appliances", x = "Valor", y = "Frequência")
ggplot(data_train, aes(x = T_out, y = Appliances)) +
geom_point() +
labs(title = "Scatterplot de T_out e Appliances", x = "T_out", y = "Appliances")
# Crie um scatterplot com regressão
ggplot(data_train, aes(x = T1, y = Appliances)) +
geom_point(color = "blue") +                    # Adicione os pontos
labs(title = "Gráfico de Regressão Linear",
x = "T_out",
y = "Appliances")
# Crie um gráfico de barras
ggplot(data_train, aes(x = WeekStatus, y = Appliances, fill = WeekStatus)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras de Appliances por WeekStatus",
x = "WeekStatus",
y = "Appliances")
# Gráfico (boxplot)
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvo com outliers")
ggplot(data_train, aes(x = WeekStatus , y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
ggplot(data_train, aes(x = Day_of_week, y = Appliances)) +
geom_boxplot() +
labs(title = "Boxplot de Appliances por WeekStatus", x = "WeekStatus", y = "Appliances")
# Crie um gráfico de barras
ggplot(data_train, aes(x = Day_of_week, y = Appliances, fill = Day_of_week)) +
geom_bar(stat = "identity") +
labs(title = "Gráfico de Barras de Appliances por Dia da Semana",
x = "Dia da Semana",
y = "Appliances")
# Converta a coluna "date" em um objeto de data
# Supondo que a coluna "date" esteja no formato correto
data_train$date <- ymd_hms(data_train$date)
# Crie um gráfico de série temporal
ggplot(data_train, aes(x = date, y = Appliances, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
ggplot(data_train, aes(x = date, y = T1, color = WeekStatus)) +
geom_line() +
labs(title = "Gráfico de Série Temporal de Appliances por WeekStatus",
x = "Data",
y = "Appliances")
# Crie um gráfico de séries temporais para T1 e RH_1
ggplot(data_train, aes(x = date)) +
geom_line(aes(y = T1, color = "T1")) +
geom_line(aes(y = RH_1, color = "RH_1")) +
labs(title = "Séries Temporais de T1 e RH_1",
x = "Data",
y = "Valor") +
scale_color_manual(values = c("T1" = "blue", "RH_1" = "red")) +
theme_minimal()
# Crie a matriz de correlação (substitua as variáveis pelas desejadas)
correlation_matrix <- cor(data_train[, c("T_out", "Appliances", "RH_1")])
corrplot(correlation_matrix, method = "circle", type = "full", tl.cex = 0.7, tl.col = "black") # Plot da matriz de correlação
## Verificação de outliers
# Trate os valores ausentes, por exemplo, preenchendo-os com a média
data_train$Appliances[is.na(data_train$Appliances)] <- mean(data_train$Appliances, na.rm = TRUE)
# 1) Verifique a presença de outliers (boxplot)
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvao com outliers")
# Trate os outliers, se necessário
Q1 <- quantile(data_train$Appliances, 0.25)
Q3 <- quantile(data_train$Appliances, 0.75)
IQR <- Q3 - Q1
limite_superior <- Q3 + 1.5 * IQR
# Verificação outliers
out <- data_train$Appliances[data_train$Appliances > limite_superior] <- limite_superior
out
## Limpeza de dados
colunas_com_valores_ausentes <- colnames(data_train)[apply(data_train, 2, function(x) any(is.na(x)))]
data_sem_valores_ausentes <- na.omit(data_train)
data_train$Appliances[is.na(data_train$Appliances)] <- mean(data_train$Appliances, na.rm = TRUE)
colunas_com_valores_ausentes <- colnames(data_train)[apply(data_train, 2, function(x) any(is.na(x)))]
# Gráfico sem outliers
ggplot(data_train, aes(y = Appliances)) +
geom_boxplot() +
ylab("Consumo de Energia (Appliances)") +
xlab("Total") +
ggtitle("Gráfico váriavel alvo sem outliers")
# 2) Verifique a presença de outliers (boxplot)
boxplot(data_train$Appliances)
# 2) Verifique a presença de outliers (boxplot)
boxplot(data_train$Appliances)
title("Gráfico váriavel alvo sem outlier")
